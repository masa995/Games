{"version":3,"sources":["dataPopup.js","popup.js","snake.js","ticTacToe.js"],"names":["dataRules","textRules","popup","document","querySelector","popupBody","popupClose","popupText","popupOpenBtns","querySelectorAll","mapRuls","name","ticTacToe","snake","addEventListener","e","classList","remove","target","closest","forEach","el","add","rulesNum","currentTarget","getAttribute","innerHTML","concat","score","widthCanvas","heightCanvas","widthGameCells","heightGameCells","rowGame","columGame","mapLevelSnake","main","restartBtnSnake","newGameBtnSnake","easyLevelBtnSnake","hardLevelBtnSnake","keyDirection","cell","indentCell","pi","Math","PI","snakeScore","animationSnake","fps","startTime","currentTime","time","currentSecond","speed","x","y","dx","dy","tails","maxTails","berrySnake","radiusBerry","barrierSnake","levelEasy","levelHard","gameLoopSnake","requestAnimationFrame","Date","getTime","floor","ctx","clearRect","renderGameBoard","drawBarrier","drawSnake","drawBerry","canvas","getContext","clientWidth","clientHeight","roundCell","setAttribute","positionBerry","removeAttribute","controlArrows","checkLevelSnake","refreshSnakeGame","colum","row","indent","context","fillStyle","fillRect","level","collisionBorder","unshift","length","pop","index","crachSnake","eatSnake","i","removeEventListener","drawScoreSnake","width","height","beginPath","arc","fill","closePath","coordinatsBerry","getRandomInt","_step","_iterator","_createForOfIteratorHelper","s","n","done","elem","value","err","f","_step2","_iterator2","num","textContent","round","min","max","random","code","cells","origBoard","restartBtn","newGameBtn","easyLevelBtn","hardLevelBtn","gameBoard","winText","keyLevelTicTacToe","huPlayer","aiPlayer","huSymbol","aiSymbol","winCombos","checkLevelTicTacToe","startTicTacToeGame","initTicTacToeGame","createElement","appendChild","turnClick","innerText","event","id","turn","checkTie","checkWin","TicTacToeBestSport","squareId","player","playerSymbol","getElementById","gameOver","board","moves","playerMoves","every","indexOf","emptySquares","setTimeout","declareWinner","who","filter","results","TicTacToeBestSportEasy","TicTacToeBestSportHard","arr","win","includes","minimax","newBoard","availSpots","bestMove","move","result","push","bestScore","Infinity"],"mappings":"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","file":"main.js","sourcesContent":["const dataRules = [\r\n  {\r\n    textRules: `<p>Крестки-нолики</p>\r\n                <p>Игроки по очереди ставят на свободные клетки поля символы (один всегда крестики, другой всегда нолики). Первый, выстроивший в ряд 3 символа по вертикали, горизонтали или диагонали, выигрывает. Первый ход делает игрок, ставящий крестики.</p>`\r\n  },\r\n\r\n  {\r\n    textRules: `<p>Змейка</p>\r\n                <p>Цель игры заключается в том, чтобы змейка съела как можно больше ягод. После каждого съеденной ягоды количество очков и размер змейки увеличивается.</p>\r\n                <p>Если змейка врежется саму в себя или в препятствие (серые кубы), то игра заканчиватся.</p>\r\n                <p>Управление осуществляется стрелочками.</p>`\r\n\r\n\r\n  }\r\n]","const popup = document.querySelector('.js-popup');\r\nconst popupBody = document.querySelector('.js-popup__body');\r\nconst popupClose = document.querySelector('.js-popup__close-btn');\r\nconst popupText = document.querySelector('.js-popup__text');\r\nconst popupOpenBtns = document.querySelectorAll('.js-btn-ruls');\r\n\r\nif (popup !== null) {\r\n  popupClose.addEventListener('click', (e) => {\r\n    popup.classList.remove('active');\r\n  });\r\n\r\n  popupBody.addEventListener('click', (e) => {\r\n    if (!e.target.closest('.js-popup__content')) {\r\n      popup.classList.remove('active');\r\n    }\r\n  })\r\n\r\n  popupOpenBtns.forEach((el) => {\r\n    el.addEventListener('click', (e) => {\r\n      popup.classList.add('active');\r\n      const rulesNum = mapRuls(e.currentTarget.getAttribute('data-ruls'));\r\n      const { textRules } = dataRules[rulesNum];\r\n      popupText.innerHTML = `${textRules}`;\r\n    });\r\n  });\r\n}\r\n\r\nfunction mapRuls(name) {\r\n  const gamesRules = {\r\n    ticTacToe: 0,\r\n    snake: 1\r\n  }\r\n  return gamesRules[name];\r\n}","const main = document.querySelector('.js-snake');\r\nconst restartBtnSnake = document.querySelector('.js-snake__restart');\r\nconst newGameBtnSnake = document.querySelector('.js-snake__new-game');\r\nconst easyLevelBtnSnake = document.querySelector('.js-snake__easy-level');\r\nconst hardLevelBtnSnake = document.querySelector('.js-snake__hard-level');\r\nlet score;\r\nlet widthCanvas;\r\nlet heightCanvas;\r\n\r\nlet widthGameCells;\r\nlet heightGameCells;\r\n\r\nlet rowGame;\r\nlet columGame;\r\n\r\nlet mapLevelSnake;\r\n\r\nlet keyDirection = null;\r\nconst cell = 25;\r\nconst indentCell = 2;\r\n\r\nconst pi = Math.PI;\r\nlet snakeScore = 0;\r\n\r\nconst animationSnake = {\r\n  fps: 300,\r\n  startTime: 0,\r\n  currentTime: 0,\r\n  time: 0,\r\n  currentSecond: 0,\r\n  speed: 0\r\n}\r\n\r\nconst snake = {\r\n  x: 0,\r\n  y: cell * 3,\r\n  dx: cell,\r\n  dy: 0,\r\n  tails: [{ x: 0, y: cell * 3 }],\r\n  maxTails: 3\r\n}\r\n\r\nconst berrySnake = {\r\n  radiusBerry: cell / 3,\r\n  x: 0,\r\n  y: cell\r\n}\r\n\r\nconst barrierSnake = {\r\n  levelEasy: [],\r\n  levelHard: []\r\n}\r\n\r\nif (main !== null) {\r\n  const canvas = document.querySelector('.js-snake__game');\r\n  const ctx = canvas.getContext('2d');\r\n  score = document.querySelector('.js-snake__score-text');\r\n\r\n  widthCanvas = main.clientWidth / 2;\r\n  heightCanvas = main.clientHeight - 300;\r\n\r\n  widthGameCells = roundCell(widthCanvas, cell);\r\n  heightGameCells = roundCell(heightCanvas, cell);\r\n\r\n  canvas.setAttribute('width', widthGameCells);\r\n  canvas.setAttribute('height', heightGameCells);\r\n\r\n  rowGame = widthGameCells / cell;\r\n  columGame = heightGameCells / cell;\r\n\r\n  barrierSnake.levelHard = [\r\n    { x: 0, y: 0 },\r\n    { x: 0, y: cell },\r\n    { x: cell, y: 0 },\r\n    { x: cell, y: cell },\r\n    { x: 0, y: heightGameCells - cell },\r\n    { x: 0, y: heightGameCells - cell * 2 },\r\n    { x: cell, y: heightGameCells - cell },\r\n    { x: cell, y: heightGameCells - cell * 2 },\r\n    { x: widthGameCells - cell, y: heightGameCells - cell },\r\n    { x: widthGameCells - cell, y: heightGameCells - cell * 2 },\r\n    { x: widthGameCells - cell * 2, y: heightGameCells - cell },\r\n    { x: widthGameCells - cell * 2, y: heightGameCells - cell * 2 },\r\n    { x: widthGameCells - cell, y: 0 },\r\n    { x: widthGameCells - cell * 2, y: 0 },\r\n    { x: widthGameCells - cell, y: cell },\r\n    { x: widthGameCells - cell * 2, y: cell }\r\n  ]\r\n\r\n  mapLevelSnake = barrierSnake.levelEasy;\r\n\r\n  positionBerry();\r\n\r\n  //animation\r\n  requestAnimationFrame(gameLoopSnake);\r\n\r\n  function gameLoopSnake() {\r\n    requestAnimationFrame(gameLoopSnake);\r\n\r\n    if (animationSnake.startTime === 0) {\r\n      animationSnake.startTime = new Date().getTime();\r\n    }\r\n\r\n    animationSnake.currentTime = new Date().getTime();\r\n    animationSnake.time = animationSnake.currentTime - animationSnake.startTime;\r\n    animationSnake.currentSecond = Math.floor(animationSnake.time / (animationSnake.fps - animationSnake.speed));\r\n\r\n    if (animationSnake.currentSecond > 0) {\r\n      animationSnake.startTime = 0;\r\n\r\n      ctx.clearRect(0, 0, widthGameCells, heightGameCells);\r\n\r\n      renderGameBoard(columGame, rowGame, cell, indentCell, ctx);\r\n      drawBarrier(ctx, mapLevelSnake);\r\n      drawSnake(ctx);\r\n      drawBerry(ctx);\r\n    }\r\n  }\r\n\r\n  newGameBtnSnake.addEventListener('click', () => {\r\n    easyLevelBtnSnake.removeAttribute('disabled');\r\n    hardLevelBtnSnake.removeAttribute('disabled');\r\n    newGameBtnSnake.setAttribute('disabled', 'disabled');\r\n    restartBtnSnake.setAttribute('disabled', 'disabled');\r\n\r\n    document.addEventListener('keydown', controlArrows);\r\n  })\r\n\r\n  easyLevelBtnSnake.addEventListener('click', () => {\r\n    checkLevelSnake(barrierSnake.levelEasy);\r\n  })\r\n\r\n  hardLevelBtnSnake.addEventListener('click', () => {\r\n    checkLevelSnake(barrierSnake.levelHard);\r\n  })\r\n\r\n  restartBtnSnake.addEventListener('click', () => {\r\n    refreshSnakeGame();\r\n    document.addEventListener('keydown', controlArrows);\r\n\r\n  })\r\n}\r\n\r\nfunction renderGameBoard(colum, row, cell, indent, context) {\r\n  for (let y = 0; y < colum; y++) {\r\n    for (let x = 0; x < row; x++) {\r\n      context.fillStyle = 'rgba(255, 255, 255, 0.4)';\r\n      context.fillRect(x * cell, y * cell, cell - indent, cell - indent);\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawBarrier(context, level) {\r\n  level.forEach((el) => {\r\n    context.fillStyle = '#333333';\r\n    context.fillRect(el.x, el.y, cell - indentCell, cell - indentCell);\r\n  });\r\n}\r\n\r\nfunction drawSnake(context) {\r\n  snake.x = snake.x + snake.dx;\r\n  snake.y = snake.y + snake.dy;\r\n\r\n  collisionBorder(widthGameCells, heightGameCells, cell);\r\n\r\n  snake.tails.unshift({ x: snake.x, y: snake.y });\r\n\r\n  if (snake.tails.length > snake.maxTails) {\r\n    snake.tails.pop();\r\n  }\r\n\r\n  snake.tails.forEach((el, index) => {\r\n    if (index == 0) {\r\n      context.fillStyle = '#333333';\r\n    } else {\r\n      context.fillStyle = '#555555';\r\n    }\r\n    context.fillRect(el.x, el.y, cell - indentCell, cell - indentCell);\r\n\r\n    crachSnake();\r\n    eatSnake();\r\n  })\r\n}\r\n\r\nfunction crachSnake() {\r\n  snake.tails.forEach((el, index) => {\r\n    for (let i = index + 1; i < snake.tails.length; i++) {\r\n      if (el.x === snake.tails[i].x && el.y === snake.tails[i].y) {\r\n        refreshSnakeGame();\r\n        document.removeEventListener('keydown', controlArrows);\r\n      }\r\n    }\r\n  });\r\n\r\n\r\n  mapLevelSnake.forEach((el) => {\r\n    if (el.x === snake.tails[0].x && el.y === snake.tails[0].y) {\r\n      refreshSnakeGame();\r\n      document.removeEventListener('keydown', controlArrows);\r\n    }\r\n  });\r\n}\r\n\r\nfunction eatSnake() {\r\n  snake.tails.forEach((el) => {\r\n    if (el.x === berrySnake.x && el.y === berrySnake.y) {\r\n      snake.maxTails++;\r\n      animationSnake.speed = animationSnake.speed + 0.5;\r\n      snakeScore++;\r\n\r\n      positionBerry();\r\n      drawScoreSnake(snakeScore);\r\n    }\r\n  });\r\n}\r\n\r\nfunction collisionBorder(width, height, cell) {\r\n  if (snake.x < 0) {\r\n    snake.x = width - cell;\r\n  }\r\n  if (snake.x >= width) {\r\n    snake.x = 0;\r\n  }\r\n\r\n  if (snake.y < 0) {\r\n    snake.y = height - cell;\r\n  }\r\n\r\n  if (snake.y >= height) {\r\n    snake.y = 0;\r\n  }\r\n}\r\n\r\nfunction drawBerry(context) {\r\n  context.beginPath();\r\n  context.fillStyle = \"#9f5e7e\";\r\n  context.arc(berrySnake.x + (cell / 2), berrySnake.y + (cell / 2), berrySnake.radiusBerry, 0, pi * 2, false);\r\n  context.fill();\r\n  context.closePath();\r\n}\r\n\r\nfunction coordinatsBerry() {\r\n  berrySnake.x = getRandomInt(0, rowGame) * cell;\r\n  berrySnake.y = getRandomInt(0, columGame) * cell;\r\n}\r\n\r\nfunction positionBerry() {\r\n  coordinatsBerry();\r\n  for (let elem of snake.tails) {\r\n    if (elem.x === berrySnake.x && elem.y === berrySnake.y) {\r\n      coordinatsBerry();\r\n    }\r\n  }\r\n\r\n  for (let elem of mapLevelSnake) {\r\n    if (elem.x === berrySnake.x && elem.y === berrySnake.y) {\r\n      coordinatsBerry();\r\n    }\r\n  }\r\n}\r\n\r\nfunction drawScoreSnake(num) {\r\n  return score.textContent = `Счет: ${num}`;\r\n}\r\n\r\nfunction checkLevelSnake(level) {\r\n  mapLevelSnake = level;\r\n  refreshSnakeGame()\r\n  restartBtnSnake.removeAttribute('disabled');\r\n  newGameBtnSnake.removeAttribute('disabled');\r\n  easyLevelBtnSnake.setAttribute('disabled', 'disabled');\r\n  hardLevelBtnSnake.setAttribute('disabled', 'disabled');\r\n}\r\n\r\nfunction refreshSnakeGame() {\r\n  snake.x = 0;\r\n  snake.y = cell * 3;\r\n  snake.dx = cell;\r\n  snake.dy = 0;\r\n  snake.tails = [{ x: 0, y: cell * 3 }];\r\n  snake.maxTails = 3;\r\n\r\n  animationSnake.fps = 300;\r\n  animationSnake.startTime = 0;\r\n\r\n  snakeScore = 0;\r\n\r\n  drawScoreSnake(snakeScore);\r\n  positionBerry();\r\n}\r\n\r\nfunction roundCell(num, cell) {\r\n  return Math.round(num / cell) * cell;\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nfunction controlArrows(e) {\r\n  if (e.code === 'ArrowUp') {\r\n    if (keyDirection === null || keyDirection !== 'down') {\r\n      snake.dx = 0;\r\n      snake.dy = -cell;\r\n      keyDirection = 'up';\r\n    }\r\n  }\r\n\r\n  if (e.code === 'ArrowDown') {\r\n    if (keyDirection === null || keyDirection !== 'up') {\r\n      snake.dx = 0;\r\n      snake.dy = cell;\r\n      keyDirection = 'down';\r\n    }\r\n  }\r\n\r\n  if (e.code === 'ArrowLeft') {\r\n    if (keyDirection === null || keyDirection !== 'right') {\r\n      snake.dx = -cell;\r\n      snake.dy = 0;\r\n      keyDirection = 'left';\r\n    }\r\n  }\r\n\r\n  if (e.code === 'ArrowRight') {\r\n    if (keyDirection === null || keyDirection !== 'left') {\r\n      snake.dx = cell;\r\n      snake.dy = 0;\r\n      keyDirection = 'right';\r\n    }\r\n  }\r\n}\r\n","const restartBtn = document.querySelector('.js-tic-tac-toe__restart');\r\nconst newGameBtn = document.querySelector('.js-tic-tac-toe__new-game');\r\nconst easyLevelBtn = document.querySelector('.js-tic-tac-toe__easy-level');\r\nconst hardLevelBtn = document.querySelector('.js-tic-tac-toe__hard-level');\r\nconst gameBoard = document.querySelector('.js-tic-tac-toe__game');\r\nconst winText = document.querySelector('.js-tic-tac-toe__win-text');\r\nlet cells;\r\nlet keyLevelTicTacToe = 'easy';\r\nconst huPlayer = 'X';\r\nconst aiPlayer = 'O';\r\nconst huSymbol = `<svg class=\"cross\">\r\n<line class=\"cross-first\" x1=\"10\" y1=\"10\" x2=\"70\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n<line class=\"cross-second\" x1=\"70\" y1=\"10\" x2=\"10\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n</svg>`;\r\nconst aiSymbol = `<svg class=\"circle\">\r\n<circle r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#c15746\" stroke-width=\"10\" fill=\"none\" stroke-linecap=\"round\" />\r\n</svg>`;\r\n\r\nlet origBoard;\r\nconst winCombos = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [6, 4, 2]\r\n];\r\n\r\nif (gameBoard !== null) {\r\n  initTicTacToeGame();\r\n\r\n  newGameBtn.addEventListener('click', () => {\r\n    easyLevelBtn.removeAttribute('disabled');\r\n    hardLevelBtn.removeAttribute('disabled');\r\n    newGameBtn.setAttribute('disabled', 'disabled');\r\n    restartBtn.setAttribute('disabled', 'disabled');\r\n  })\r\n\r\n  easyLevelBtn.addEventListener('click', () => {\r\n    checkLevelTicTacToe('easy');\r\n  })\r\n\r\n  hardLevelBtn.addEventListener('click', () => {\r\n    checkLevelTicTacToe('hard');\r\n  })\r\n\r\n  restartBtn.addEventListener('click', () => {\r\n    startTicTacToeGame();\r\n  })\r\n}\r\n\r\nfunction checkLevelTicTacToe(level) {\r\n  keyLevelTicTacToe = level;\r\n  startTicTacToeGame();\r\n  restartBtn.removeAttribute('disabled');\r\n  newGameBtn.removeAttribute('disabled');\r\n  easyLevelBtn.setAttribute('disabled', 'disabled');\r\n  hardLevelBtn.setAttribute('disabled', 'disabled');\r\n}\r\n\r\nfunction initTicTacToeGame() {\r\n  for (let i = 0; i < 9; i++) {\r\n    const cell = document.createElement('div');\r\n    cell.setAttribute('id', i);\r\n    cell.classList.add('tic-tac-toe__cell');\r\n    gameBoard.appendChild(cell);\r\n  }\r\n  cells = document.querySelectorAll('.tic-tac-toe__cell');\r\n}\r\n\r\nfunction startTicTacToeGame() {\r\n  origBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].innerHTML = '';\r\n    cells[i].classList.add('mouse');\r\n    cells[i].addEventListener('click', turnClick);\r\n  }\r\n  winText.innerText = '';\r\n}\r\n\r\nfunction turnClick(event) {\r\n  if (typeof origBoard[event.target.id] == 'number') {\r\n    turn(event.target.id, huPlayer, huSymbol);\r\n\r\n    if ((!checkTie()) && (!checkWin(origBoard, huPlayer))) {\r\n      turn(TicTacToeBestSport(), aiPlayer, aiSymbol);\r\n\r\n    }\r\n  }\r\n}\r\n\r\nfunction turn(squareId, player, playerSymbol) {\r\n  origBoard[squareId] = player;\r\n  document.getElementById(squareId).innerHTML = playerSymbol;\r\n  cells[squareId].classList.remove('mouse');\r\n\r\n  let gameWon = checkWin(origBoard, player);\r\n  if (gameWon) {\r\n    gameOver(player);\r\n  }\r\n}\r\n\r\nfunction checkWin(board, player) {\r\n  let moves = playerMoves(board, player);\r\n\r\n  for (let win of winCombos) {\r\n    if (win.every((elem) => moves.indexOf(elem) !== -1)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkTie() {\r\n  if (emptySquares().length == 0) {\r\n    for (let i = 0; i < cells.length; i++) {\r\n      cells[i].removeEventListener('click', turnClick);\r\n    }\r\n    setTimeout(() => declareWinner('Ничья'), 1500);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction gameOver(player) {\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].removeEventListener('click', turnClick);\r\n    cells[i].classList.remove('mouse');\r\n  }\r\n  setTimeout(() => declareWinner(player === huPlayer ? 'Вы победили' : 'Вы проиграли'), 1500);\r\n}\r\n\r\nfunction declareWinner(who) {\r\n  winText.innerText = who;\r\n}\r\n\r\nfunction emptySquares() {\r\n  return origBoard.filter((cell) => typeof cell == 'number');\r\n}\r\n\r\nfunction playerMoves(board, player) {\r\n  let results = [];\r\n\r\n  for (let i = 0; i < board.length; i++) {\r\n    const e = board[i];\r\n    if (e === player) {\r\n      results = results.concat(i);\r\n    }\r\n  }\r\n  return results;\r\n}\r\n\r\nfunction TicTacToeBestSport() {\r\n  if (keyLevelTicTacToe === 'easy') {\r\n    return TicTacToeBestSportEasy();\r\n  }\r\n  else if (keyLevelTicTacToe === 'hard') {\r\n    return TicTacToeBestSportHard();\r\n  }\r\n  else {\r\n    return TicTacToeBestSportHard();\r\n  }\r\n}\r\n\r\nfunction TicTacToeBestSportEasy() {\r\n  let arr = emptySquares();\r\n  let moves = playerMoves(origBoard, huPlayer);\r\n\r\n  for (let win of winCombos) {\r\n    if ((moves.includes(win[0])) && (moves.includes(win[1]))) {\r\n      if (arr.includes(win[2])) {\r\n        return win[2];\r\n      }\r\n    } else if ((moves.includes(win[0])) && (moves.includes(win[2]))) {\r\n      if (arr.includes(win[3])) {\r\n        return win[1];\r\n      }\r\n    } else if ((moves.includes(win[1])) && (moves.includes(win[2]))) {\r\n      if (arr.includes(win[0])) {\r\n        return win[0];\r\n      }\r\n    }\r\n  }\r\n  let index = Math.floor(Math.random() * arr.length);\r\n  return arr[index];\r\n}\r\n\r\nfunction TicTacToeBestSportHard() {\r\n  let arr = minimax(origBoard, aiPlayer);\r\n  return arr.index;\r\n}\r\n\r\nfunction minimax(newBoard, player) {\r\n  let availSpots = emptySquares();\r\n\r\n  if (checkWin(newBoard, huPlayer)) {\r\n    return { score: -10 };\r\n  } else if (checkWin(newBoard, aiPlayer)) {\r\n    return { score: 10 };\r\n  } else if (availSpots.length === 0) {\r\n    return { score: 0 };\r\n  }\r\n  let moves = [];\r\n\r\n  for (let i = 0; i < availSpots.length; i++) {\r\n    let move = [];\r\n\r\n    move.index = newBoard[availSpots[i]];\r\n    newBoard[availSpots[i]] = player;\r\n\r\n    if (player == aiPlayer) {\r\n      let result = minimax(newBoard, huPlayer);\r\n      move.score = result.score;\r\n    } else {\r\n      let result = minimax(newBoard, aiPlayer);\r\n      move.score = result.score;\r\n    }\r\n\r\n    newBoard[availSpots[i]] = move.index;\r\n    moves.push(move);\r\n  }\r\n\r\n  let bestMove;\r\n\r\n  if (player === aiPlayer) {\r\n    let bestScore = -Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score > bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score < bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n  return moves[bestMove];\r\n}"]}