{"version":3,"sources":["dataPopup.js","popup.js","snake.js","ticTacToe.js"],"names":["dataRuls","textRuls","popup","document","querySelector","popupBody","popupClose","popupText","popupOpenBtns","querySelectorAll","mapRuls","name","ticTacToe","snake","addEventListener","e","classList","remove","target","closest","forEach","el","add","rulsNum","currentTarget","getAttribute","innerHTML","concat","world","cells","origBoard","restartBtn","newGameBtn","easyLevelBtn","hardLevelBtn","gameBoard","winText","keyLevel","huPlayer","aiPlayer","huSymbol","aiSymbol","winCombos","checkLevel","level","startGame","removeAttribute","setAttribute","initGame","i","cell","createElement","appendChild","length","turnClick","innerText","event","id","turn","checkTie","checkWin","bestSport","squareId","player","playerSymbol","getElementById","gameOver","board","_step","moves","playerMoves","_iterator","_createForOfIteratorHelper","s","n","done","value","every","elem","indexOf","err","f","emptySquares","removeEventListener","setTimeout","declareWinner","who","filter","results","bestSportEasy","bestSportHard","_step2","arr","_iterator2","win","includes","Math","floor","random","minimax","index","newBoard","availSpots","score","bestMove","move","result","push","bestScore","Infinity"],"mappings":"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","file":"main.js","sourcesContent":["const dataRuls = [\r\n  {\r\n    textRuls: `<p>Крестки-нолики</p>\r\n                <p>Игроки по очереди ставят на свободные клетки поля символы (один всегда крестики, другой всегда нолики). Первый, выстроивший в ряд 3 символа по вертикали, горизонтали или диагонали, выигрывает. Первый ход делает игрок, ставящий крестики.</p>`\r\n  },\r\n\r\n  {\r\n    textRuls: `<p>Змейка</p>\r\n                <p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Maxime necessitatibus voluptate molestias eaque iste\r\n                eum corrupti tenetur, illo nihil illum natus dolore perspiciatis ducimus eius exercitationem laboriosam tempore\r\n                reiciendis quaerat.</p>`\r\n  }\r\n]","const popup = document.querySelector('.js-popup');\r\nconst popupBody = document.querySelector('.js-popup__body');\r\nconst popupClose = document.querySelector('.js-popup__close-btn'); const popupText = document.querySelector('.js-popup__text');\r\nconst popupOpenBtns = document.querySelectorAll('.js-btn-ruls');\r\n\r\nif (popup !== null) {\r\n  popupClose.addEventListener('click', (e) => {\r\n    popup.classList.remove('active');\r\n  });\r\n\r\n  popupBody.addEventListener('click', (e) => {\r\n    if (!e.target.closest('.js-popup__content')) {\r\n      popup.classList.remove('active');\r\n    }\r\n  })\r\n\r\n  popupOpenBtns.forEach((el) => {\r\n    el.addEventListener('click', (e) => {\r\n      popup.classList.add('active');\r\n      const rulsNum = mapRuls(e.currentTarget.getAttribute('data-ruls'));\r\n      const { textRuls } = dataRuls[rulsNum];\r\n      popupText.innerHTML = `${textRuls}`;\r\n    });\r\n  });\r\n}\r\n\r\nfunction mapRuls(name) {\r\n  const gamesRuls = {\r\n    ticTacToe: 0,\r\n    snake: 1\r\n  }\r\n  return gamesRuls[name];\r\n}","const world = document.querySelector('.js-snake__game');\r\n// const ctx = world.getContext('2d');\r\n","const restartBtn = document.querySelector('.js-tic-tac-toe__restart');\r\nconst newGameBtn = document.querySelector('.js-tic-tac-toe__new-game');\r\nconst easyLevelBtn = document.querySelector('.js-tic-tac-toe__easy-level');\r\nconst hardLevelBtn = document.querySelector('.js-tic-tac-toe__hard-level');\r\nconst gameBoard = document.querySelector('.js-tic-tac-toe__game');\r\nconst winText = document.querySelector('.js-tic-tac-toe__win-text');\r\nlet cells;\r\nlet keyLevel = 'easy';\r\nconst huPlayer = 'X';\r\nconst aiPlayer = 'O';\r\nconst huSymbol = `<svg class=\"cross\">\r\n<line class=\"cross-first\" x1=\"10\" y1=\"10\" x2=\"70\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n<line class=\"cross-second\" x1=\"70\" y1=\"10\" x2=\"10\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n</svg>`;\r\nconst aiSymbol = `<svg class=\"circle\">\r\n<circle r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#c15746\" stroke-width=\"10\" fill=\"none\" stroke-linecap=\"round\" />\r\n</svg>`;\r\n\r\nlet origBoard;\r\nconst winCombos = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [6, 4, 2]\r\n];\r\n\r\nif (gameBoard !== null) {\r\n  initGame();\r\n\r\n  newGameBtn.addEventListener('click', () => {\r\n    easyLevelBtn.removeAttribute('disabled');\r\n    hardLevelBtn.removeAttribute('disabled');\r\n    newGameBtn.setAttribute('disabled', 'disabled');\r\n    restartBtn.setAttribute('disabled', 'disabled');\r\n  })\r\n\r\n  easyLevelBtn.addEventListener('click', () => {\r\n    checkLevel('easy');\r\n  })\r\n\r\n  hardLevelBtn.addEventListener('click', () => {\r\n    checkLevel('hard');\r\n  })\r\n\r\n  restartBtn.addEventListener('click', () => {\r\n    startGame();\r\n  })\r\n}\r\n\r\nfunction checkLevel(level) {\r\n  keyLevel = level;\r\n  startGame();\r\n  restartBtn.removeAttribute('disabled');\r\n  newGameBtn.removeAttribute('disabled');\r\n  easyLevelBtn.setAttribute('disabled', 'disabled');\r\n  hardLevelBtn.setAttribute('disabled', 'disabled');\r\n}\r\n\r\nfunction initGame() {\r\n  for (let i = 0; i < 9; i++) {\r\n    const cell = document.createElement('div');\r\n    cell.setAttribute('id', i);\r\n    cell.classList.add('tic-tac-toe__cell');\r\n    gameBoard.appendChild(cell);\r\n  }\r\n  cells = document.querySelectorAll('.tic-tac-toe__cell');\r\n}\r\n\r\nfunction startGame() {\r\n  origBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].innerHTML = '';\r\n    cells[i].classList.add('mouse');\r\n    cells[i].addEventListener('click', turnClick);\r\n  }\r\n  winText.innerText = '';\r\n}\r\n\r\nfunction turnClick(event) {\r\n  if (typeof origBoard[event.target.id] == 'number') {\r\n    turn(event.target.id, huPlayer, huSymbol);\r\n\r\n    if ((!checkTie()) && (!checkWin(origBoard, huPlayer))) {\r\n      turn(bestSport(), aiPlayer, aiSymbol);\r\n    }\r\n  }\r\n}\r\n\r\nfunction turn(squareId, player, playerSymbol) {\r\n  origBoard[squareId] = player;\r\n  document.getElementById(squareId).innerHTML = playerSymbol;\r\n  cells[squareId].classList.remove('mouse');\r\n\r\n  let gameWon = checkWin(origBoard, player);\r\n  if (gameWon) {\r\n    gameOver(player);\r\n  }\r\n}\r\n\r\nfunction checkWin(board, player) {\r\n  let moves = playerMoves(board, player);\r\n\r\n  for (let win of winCombos) {\r\n    if (win.every((elem) => moves.indexOf(elem) !== -1)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkTie() {\r\n  if (emptySquares().length == 0) {\r\n    for (let i = 0; i < cells.length; i++) {\r\n      cells[i].removeEventListener('click', turnClick);\r\n    }\r\n    setTimeout(() => declareWinner('Ничья'), 1500);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction gameOver(player) {\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].removeEventListener('click', turnClick);\r\n    cells[i].classList.remove('mouse');\r\n  }\r\n  setTimeout(() => declareWinner(player === huPlayer ? 'Вы победили' : 'Вы проиграли'), 1500);\r\n}\r\n\r\nfunction declareWinner(who) {\r\n  winText.innerText = who;\r\n}\r\n\r\nfunction emptySquares() {\r\n  return origBoard.filter((cell) => typeof cell == 'number');\r\n}\r\n\r\nfunction playerMoves(board, player) {\r\n  let results = [];\r\n\r\n  for (let i = 0; i < board.length; i++) {\r\n    const e = board[i];\r\n    if (e === player) {\r\n      results = results.concat(i);\r\n    }\r\n  }\r\n  return results;\r\n}\r\n\r\nfunction bestSport() {\r\n  if (keyLevel === 'easy') {\r\n    return bestSportEasy();\r\n  }\r\n  else if (keyLevel === 'hard') {\r\n    return bestSportHard();\r\n  }\r\n  else {\r\n    return bestSportHard();\r\n  }\r\n}\r\n\r\nfunction bestSportEasy() {\r\n  let arr = emptySquares();\r\n  let moves = playerMoves(origBoard, huPlayer);\r\n\r\n  for (let win of winCombos) {\r\n    if ((moves.includes(win[0])) && (moves.includes(win[1]))) {\r\n      if (arr.includes(win[2])) {\r\n        return win[2];\r\n      }\r\n    } else if ((moves.includes(win[0])) && (moves.includes(win[2]))) {\r\n      if (arr.includes(win[3])) {\r\n        return win[1];\r\n      }\r\n    } else if ((moves.includes(win[1])) && (moves.includes(win[2]))) {\r\n      if (arr.includes(win[0])) {\r\n        return win[0];\r\n      }\r\n    }\r\n  }\r\n  let index = Math.floor(Math.random() * arr.length);\r\n  return arr[index];\r\n}\r\n\r\nfunction bestSportHard() {\r\n  let arr = minimax(origBoard, aiPlayer);\r\n  return arr.index;\r\n}\r\n\r\nfunction minimax(newBoard, player) {\r\n  let availSpots = emptySquares();\r\n\r\n  if (checkWin(newBoard, huPlayer)) {\r\n    return { score: -10 };\r\n  } else if (checkWin(newBoard, aiPlayer)) {\r\n    return { score: 10 };\r\n  } else if (availSpots.length === 0) {\r\n    return { score: 0 };\r\n  }\r\n  let moves = [];\r\n\r\n  for (let i = 0; i < availSpots.length; i++) {\r\n    let move = [];\r\n\r\n    move.index = newBoard[availSpots[i]];\r\n    newBoard[availSpots[i]] = player;\r\n\r\n    if (player == aiPlayer) {\r\n      let result = minimax(newBoard, huPlayer);\r\n      move.score = result.score;\r\n    } else {\r\n      let result = minimax(newBoard, aiPlayer);\r\n      move.score = result.score;\r\n    }\r\n\r\n    newBoard[availSpots[i]] = move.index;\r\n    moves.push(move);\r\n  }\r\n\r\n  let bestMove;\r\n\r\n  if (player === aiPlayer) {\r\n    let bestScore = -Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score > bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score < bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n  return moves[bestMove];\r\n}"]}