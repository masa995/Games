{"version":3,"sources":["snake.js","ticTacToe.js"],"names":["cells","origBoard","restartBtn","document","querySelector","newGameBtn","easyLevelBtn","hardLevelBtn","gameBoard","winText","keyLevel","huPlayer","aiPlayer","huSymbol","aiSymbol","winCombos","checkLevel","level","startGame","removeAttribute","setAttribute","initGame","i","cell","createElement","classList","add","appendChild","querySelectorAll","length","innerHTML","addEventListener","turnClick","innerText","event","target","id","turn","checkTie","checkWin","bestSport","squareId","player","playerSymbol","getElementById","remove","gameOver","board","results","concat","_step","plays","_iterator","_createForOfIteratorHelper","s","n","done","value","every","elem","indexOf","err","e","f","emptySquares","removeEventListener","setTimeout","declareWinner","who","filter","bestSportEasy","bestSportHard","arr","Math","floor","random","minimax","index","newBoard","availSpots","score","bestMove","moves","move","result","push","bestScore","Infinity"],"mappings":"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","file":"main.js","sourcesContent":["","const restartBtn = document.querySelector('.js-tic-tac-toe__restart');\r\nconst newGameBtn = document.querySelector('.js-tic-tac-toe__new-game');\r\nconst easyLevelBtn = document.querySelector('.js-tic-tac-toe__easy-level');\r\nconst hardLevelBtn = document.querySelector('.js-tic-tac-toe__hard-level');\r\nconst gameBoard = document.querySelector('.js-tic-tac-toe__game');\r\nconst winText = document.querySelector('.js-tic-tac-toe__win-text');\r\nlet cells;\r\nlet keyLevel = 'easy';\r\nconst huPlayer = 'X';\r\nconst aiPlayer = 'O';\r\nconst huSymbol = `<svg class=\"cross\">\r\n<line class=\"cross-first\" x1=\"10\" y1=\"10\" x2=\"70\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n<line class=\"cross-second\" x1=\"70\" y1=\"10\" x2=\"10\" y2=\"70\" stroke=\"#333\" stroke-width=\"10\" stroke-linecap=\"round\" />\r\n</svg>`;\r\nconst aiSymbol = `<svg class=\"circle\">\r\n<circle r=\"30\" cx=\"40\" cy=\"40\" stroke=\"#c15746\" stroke-width=\"10\" fill=\"none\" stroke-linecap=\"round\" />\r\n</svg>`;\r\n\r\nlet origBoard;\r\nconst winCombos = [\r\n  [0, 1, 2],\r\n  [3, 4, 5],\r\n  [6, 7, 8],\r\n  [0, 3, 6],\r\n  [1, 4, 7],\r\n  [2, 5, 8],\r\n  [0, 4, 8],\r\n  [6, 4, 2]\r\n];\r\n\r\ninitGame();\r\n\r\nnewGameBtn.addEventListener('click', () => {\r\n  easyLevelBtn.removeAttribute('disabled');\r\n  hardLevelBtn.removeAttribute('disabled');\r\n  newGameBtn.setAttribute('disabled', 'disabled');\r\n  restartBtn.setAttribute('disabled', 'disabled');\r\n})\r\n\r\neasyLevelBtn.addEventListener('click', () => {\r\n  checkLevel('easy');\r\n})\r\n\r\nhardLevelBtn.addEventListener('click', () => {\r\n  checkLevel('hard');\r\n})\r\n\r\nrestartBtn.addEventListener('click', () => {\r\n  startGame();\r\n})\r\n\r\nfunction checkLevel(level) {\r\n  keyLevel = level;\r\n  startGame();\r\n  restartBtn.removeAttribute('disabled');\r\n  newGameBtn.removeAttribute('disabled');\r\n  easyLevelBtn.setAttribute('disabled', 'disabled');\r\n  hardLevelBtn.setAttribute('disabled', 'disabled');\r\n}\r\n\r\nfunction initGame() {\r\n  for (let i = 0; i < 9; i++) {\r\n    const cell = document.createElement('div');\r\n    cell.setAttribute('id', i);\r\n    cell.classList.add('tic-tac-toe__cell');\r\n    gameBoard.appendChild(cell);\r\n  }\r\n  cells = document.querySelectorAll('.tic-tac-toe__cell');\r\n}\r\n\r\nfunction startGame() {\r\n  origBoard = [0, 1, 2, 3, 4, 5, 6, 7, 8];\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].innerHTML = '';\r\n    cells[i].classList.add('mouse');\r\n    cells[i].addEventListener('click', turnClick);\r\n  }\r\n  winText.innerText = '';\r\n}\r\n\r\nfunction turnClick(event) {\r\n  if (typeof origBoard[event.target.id] == 'number') {\r\n    turn(event.target.id, huPlayer, huSymbol);\r\n\r\n    if ((!checkTie()) && (!checkWin(origBoard, huPlayer))) {\r\n      turn(bestSport(), aiPlayer, aiSymbol);\r\n    }\r\n  }\r\n}\r\n\r\nfunction turn(squareId, player, playerSymbol) {\r\n  origBoard[squareId] = player;\r\n  document.getElementById(squareId).innerHTML = playerSymbol;\r\n  cells[squareId].classList.remove('mouse');\r\n\r\n  let gameWon = checkWin(origBoard, player);\r\n  if (gameWon) {\r\n    gameOver(player);\r\n  }\r\n}\r\n\r\nfunction checkWin(board, player) {\r\n  let results = [];\r\n\r\n  for (let i = 0; i < board.length; i++) {\r\n    const e = board[i];\r\n    if (e === player) {\r\n      results = results.concat(i);\r\n    }\r\n  }\r\n\r\n  let plays = results;\r\n\r\n  for (let win of winCombos) {\r\n    if (win.every((elem) => plays.indexOf(elem) !== -1)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction checkTie() {\r\n  if (emptySquares().length == 0) {\r\n    for (let i = 0; i < cells.length; i++) {\r\n      cells[i].removeEventListener('click', turnClick);\r\n    }\r\n    setTimeout(() => declareWinner('Ничья'), 1500);\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction gameOver(player) {\r\n  for (let i = 0; i < cells.length; i++) {\r\n    cells[i].removeEventListener('click', turnClick);\r\n    cells[i].classList.remove('mouse');\r\n  }\r\n  setTimeout(() => declareWinner(player === huPlayer ? 'Вы победили' : 'Вы проиграли'), 1500);\r\n}\r\n\r\nfunction declareWinner(who) {\r\n  winText.innerText = who;\r\n}\r\n\r\nfunction emptySquares() {\r\n  return origBoard.filter((cell) => typeof cell == 'number');\r\n}\r\n\r\nfunction bestSport() {\r\n  if (keyLevel === 'easy') {\r\n    return bestSportEasy();\r\n  }\r\n  else if (keyLevel === 'hard') {\r\n    return bestSportHard();\r\n  }\r\n  else {\r\n    return bestSportHard();\r\n  }\r\n}\r\n\r\nfunction bestSportEasy() {\r\n  let arr = emptySquares();\r\n  let index = Math.floor(Math.random() * arr.length);\r\n  return arr[index];\r\n}\r\n\r\nfunction bestSportHard() {\r\n  let arr = minimax(origBoard, aiPlayer);\r\n  return arr.index;\r\n}\r\n\r\nfunction minimax(newBoard, player) {\r\n  let availSpots = emptySquares();\r\n\r\n  if (checkWin(newBoard, huPlayer)) {\r\n    return { score: -10 };\r\n  } else if (checkWin(newBoard, aiPlayer)) {\r\n    return { score: 10 };\r\n  } else if (availSpots.length === 0) {\r\n    return { score: 0 };\r\n  }\r\n  let moves = [];\r\n\r\n  for (let i = 0; i < availSpots.length; i++) {\r\n    let move = [];\r\n\r\n    move.index = newBoard[availSpots[i]];\r\n    newBoard[availSpots[i]] = player;\r\n\r\n    if (player == aiPlayer) {\r\n      let result = minimax(newBoard, huPlayer);\r\n      move.score = result.score;\r\n    } else {\r\n      let result = minimax(newBoard, aiPlayer);\r\n      move.score = result.score;\r\n    }\r\n\r\n    newBoard[availSpots[i]] = move.index;\r\n    moves.push(move);\r\n  }\r\n\r\n  let bestMove;\r\n\r\n  if (player === aiPlayer) {\r\n    let bestScore = -Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score > bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  } else {\r\n    let bestScore = Infinity;\r\n    for (let i = 0; i < moves.length; i++) {\r\n      if (moves[i].score < bestScore) {\r\n        bestScore = moves[i].score;\r\n        bestMove = i;\r\n      }\r\n    }\r\n  }\r\n  return moves[bestMove];\r\n}"]}